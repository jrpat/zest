#include "zest.hh"

const char* fake_fail =
  "\n[FirstGroup]"
  "\n ✔ is_ok"
  "\n ✔ make_ok"
  "\n ✔ final_digits"
  "\n ✔ incr_final_digits"
  "\n"
  "\n[SecondGroup]"
  "\n ✔ Mutually Exclusive Types"
  "\n ✔ Empty"
  "\n ✔ Root Only"
  "\n ✔ Absolute Foobars"
  "\n ✔ Relative Foobars"
  "\n ✔ Absolute Bazquxs"
  "\n ✔ Relative Bazquxs"
  "\n ✔ Parent"
  "\n ✔ Trailing Slash is Ignored"
  "\n ✔ Lexically Normalized"
  "\n ✔ Various Pathological"
  "\n ✔ Comparisons"
  "\n"
  "\n[ThirdGroup]"
  "\n ✔ Delegate"
  "\n ✔ Foobar"
  "\n ✔ Bazqux"
  "\n ✔ Output"
  "\n"
  "\n[FourthGroup]"
  "\n ✔ Basic"
  "\n ✗ Construct w/ various types"
  "\n/Users/me/src/project/test/test_fourth.cc:18: FAIL: \"z\" == s2.name() (got a)"
  "\n ✔ Copy affects refcount"
  "\n ✔ Move does not affect refcount"
  "\n ✔ Registry auto add/remove"
  "\n ✔ std::set can hold"
  "\n ✔ std::unordered_set can hold"
  "\n ✔ gensym"
  "\n"
  "\n[FifthGroup]"
  "\n ✔ MAKE_x & FIND_x are inverses"
  "\n ✔ Components"
  "\n ✔ Sortable"
  "\n ✔ Equality"
  "\n ✔ Next"
  "\n"
  "\n[SixthGroup]"
  "\n ✔ Constructors"
  "\n"
  "\n[SeventhGroup]"
  "\n  …skipping…"
  "\n"
  "\n┌──────┐"
  "\n│ FAIL │ (1 skipped)"
  "\n└──────┘"
  "\n"
;

const char* fake_pass =
  "\n[FirstGroup]"
  "\n ✔ is_ok"
  "\n ✔ make_ok"
  "\n ✔ final_digits"
  "\n ✔ incr_final_digits"
  "\n"
  "\n[SecondGroup]"
  "\n ✔ Mutually Exclusive Types"
  "\n ✔ Empty"
  "\n ✔ Root Only"
  "\n ✔ Absolute Foobars"
  "\n ✔ Relative Foobars"
  "\n ✔ Absolute Bazquxs"
  "\n ✔ Relative Bazquxs"
  "\n ✔ Parent"
  "\n ✔ Trailing Slash is Ignored"
  "\n ✔ Lexically Normalized"
  "\n ✔ Various Pathological"
  "\n ✔ Comparisons"
  "\n"
  "\n[ThirdGroup]"
  "\n ✔ Delegate"
  "\n ✔ Foobar"
  "\n ✔ Bazqux"
  "\n ✔ Output"
  "\n"
  "\n[FourthGroup]"
  "\n ✔ Basic"
  "\n ✔ Construct w/ various types"
  "\n ✔ Copy affects refcount"
  "\n ✔ Move does not affect refcount"
  "\n ✔ Registry auto add/remove"
  "\n ✔ std::set can hold"
  "\n ✔ std::unordered_set can hold"
  "\n ✔ gensym"
  "\n"
  "\n[FifthGroup]"
  "\n ✔ MAKE_x & FIND_x are inverses"
  "\n ✔ Components"
  "\n ✔ Sortable"
  "\n ✔ Equality"
  "\n ✔ Next"
  "\n"
  "\n[SixthGroup]"
  "\n ✔ Constructors"
  "\n"
  "\n[SeventhGroup]"
  "\n  …skipping…"
  "\n"
  "\n┌──────┐"
  "\n│ PASS │ (1 skipped)"
  "\n└──────┘"
  "\n"
;

TEST(FakeTest, "not real")
{
  is_eq(1, 1);
}

int main(int argc, const char* argv[])
{
  if ((argc > 1) && !strcmp("fail", argv[1])) {
    std::cerr << fake_fail;
  } else {
    std::cerr << fake_pass;
  }
}

